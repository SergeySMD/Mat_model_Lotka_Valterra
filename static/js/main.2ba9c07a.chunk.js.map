{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","App","useState","data","setData","alpha","beta","gamma","delta","start_X","start_Y","time","options","setOptions","splitOptions","LodkaValterraFunc","x","y","useEffect","payload","dx","dy","i","push","className","Object","keys","map","param","style","minWidth","value","onChange","prev","min","max","type","mode","marker","color","name","layout","width","height","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+RAMMA,EAAOC,IAAsBC,KAgHpBC,MA9Gf,WACE,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA8BF,mBAAS,CACrCG,MAAO,GACPC,KAAM,KACNC,MAAO,GACPC,MAAO,MACPC,QAAS,GACTC,QAAS,GACTC,KAAM,MAPR,mBAAOC,EAAP,KAAgBC,EAAhB,KASMC,EAAe,CACnBT,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,QAAS,EACTC,QAAS,EACTC,KAAM,GAGFI,EAAoB,SAACC,EAAEC,EAAEL,GAC7B,IAAOP,EAA6BO,EAA7BP,MAAOC,EAAsBM,EAAtBN,KAAMC,EAAgBK,EAAhBL,MAGpB,MAAO,EAFQF,EAAQC,EAAOW,GAAKD,GADCJ,EAATJ,MAEKQ,EAAhBT,GAAqBU,IAwBvC,OArBAC,qBAAU,WACRd,GAAQ,WAQN,IAPA,IAAMe,EAAU,CACdC,GAAI,GACJC,GAAI,GACJV,KAAM,IAEJK,EAAIJ,EAAQH,QACZQ,EAAIL,EAAQF,QACPY,EAAI,EAAGA,EAAIV,EAAQD,KAAMW,IAAK,CACrCH,EAAQC,GAAGG,KAAKP,GAChBG,EAAQE,GAAGE,KAAKN,GAChBE,EAAQR,KAAKY,KAAKD,GAClB,MAAgBP,EAAkBC,EAAEC,EAAEL,GAAtC,mBACAI,GADA,KAEAC,GAFA,KAIF,OAAOE,OAET,CAACP,IAGD,sBAAKY,UAAU,MAAf,UACE,sBAAKA,UAAU,QAAf,uIAEE,qBAAKA,UAAU,OAAf,SACGC,OAAOC,KAAKd,GAASe,KAAI,SAACC,GAAD,OACxB,sBAAKJ,UAAU,YAAf,UACE,sBAAKK,MAAO,CAACC,SAAU,QAAvB,UAAiCF,EAAjC,OACA,cAAC,IAAD,CACEG,MAAOnB,EAAQgB,GAAOd,EAAac,GACnCI,SAAU,SAAC7B,GAAQU,GAAW,SAAAoB,GAAI,kCAASA,GAAT,kBAAgBL,EAAQzB,EAAKW,EAAac,SAC5EM,IAAe,SAAVN,EAAmB,GAAK,EAC7BO,IAAe,SAAVP,EAAmB,IAAM,MAEhC,qBAAKC,MAAO,CAACC,SAAU,QAAvB,SAAiClB,EAAQgB,aAI/C,qBAAKJ,UAAU,OAAf,uNAIF,sBAAKA,UAAU,WAAf,UACA,cAAC1B,EAAD,CACEK,KAAM,CACJ,CACEa,EAAGb,EAAKQ,KACRM,EAAGd,EAAKiB,GACRgB,KAAM,UACNC,KAAM,QACNC,OAAQ,CAACC,MAAO,QAChBC,KAAM,yFAER,CACExB,EAAGb,EAAKQ,KACRM,EAAGd,EAAKkB,GACRe,KAAM,UACNC,KAAM,QACNC,OAAQ,CAACC,MAAO,OAChBC,KAAM,4GAGVC,OAAS,CAACC,MAAO,IAAKC,OAAQ,IAAKC,MAAO,0OAE5C,cAAC9C,EAAD,CACEK,KAAM,CACJ,CACEa,EAAGb,EAAKiB,GACRH,EAAGd,EAAKkB,GACRe,KAAM,UACNC,KAAM,QACNC,OAAQ,CAACC,MAAO,UAGpBE,OAAS,CAACC,MAAO,IAAKC,OAAQ,IAAKC,MAAO,mGClGnCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.2ba9c07a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport './App.css';\nimport Plotly from \"plotly.js\"\nimport createPlotlyComponent from 'react-plotly.js/factory';\nconst Plot = createPlotlyComponent(Plotly);\n\nfunction App() {\n  const [data,setData] = useState([])\n  const [options, setOptions] = useState({\n    alpha: 0.1,\n    beta: 0.002,\n    gamma: 0.2,\n    delta: 0.0025,\n    start_X: 80,\n    start_Y: 20,\n    time: 100,\n  })\n  const splitOptions = {\n    alpha: 100,\n    beta: 10000,\n    gamma: 100,\n    delta: 10000,\n    start_X: 1,\n    start_Y: 1,\n    time: 1,\n  }\n\n  const LodkaValterraFunc = (x,y,options) => {\n    const {alpha, beta, gamma, delta} = options;\n    const dx_dt = (alpha - beta * y) * x;\n    const dy_dt = (-gamma + delta * x) * y;\n    return [dx_dt,dy_dt]\n  }\n  useEffect(() => {\n    setData(() => {\n      const payload = {\n        dx: [],\n        dy: [],\n        time: [],\n      }\n      let x = options.start_X;\n      let y = options.start_Y;\n      for (let i = 0; i < options.time; i++) {\n        payload.dx.push(x);\n        payload.dy.push(y);\n        payload.time.push(i);\n        const [dx,dy] = LodkaValterraFunc(x,y,options);\n        x+=dx;\n        y+=dy;\n      }\n      return payload\n    })\n  },[options])\n\n  return (\n    <div className=\"App\">\n      <div className=\"title\">\n        Модель Лотки-Вольтерры\n        <div className=\"btns\">\n          {Object.keys(options).map((param) => (\n            <div className=\"btns_item\">\n              <div style={{minWidth: '60px'}}>{param}:</div>\n              <Slider \n                value={options[param]*splitOptions[param]} \n                onChange={(data)=>{setOptions(prev => ({...prev, [param]: data/splitOptions[param]}))}}\n                min={param === 'time' ? 10 : 0}\n                max={param === 'time' ? 200 : 100}\n              />\n              <div style={{minWidth: '60px'}}>{options[param]}</div>\n            </div>\n          ))}\n        </div>\n        <div className=\"desc\">\n          Работу выполнил Алексеев Сергей. ИДМ-21-06.\n        </div>\n      </div>\n      <div className=\"graphics\">\n      <Plot\n        data={[\n          {\n            x: data.time,\n            y: data.dx,\n            type: 'scatter',\n            mode: 'lines',\n            marker: {color: 'blue'},\n            name: \"Популяция жертв\"\n          },\n          {\n            x: data.time,\n            y: data.dy,\n            type: 'scatter',\n            mode: 'lines',\n            marker: {color: 'red'},\n            name: \"Популяция хищников\"\n          },\n        ]}\n        layout={ {width: 600, height: 400, title: 'График зависимости популяций друг от друга.'} }\n      />\n      <Plot\n        data={[\n          {\n            x: data.dx,\n            y: data.dy,\n            type: 'scatter',\n            mode: 'lines',\n            marker: {color: 'blue'},\n          },\n        ]}\n        layout={ {width: 600, height: 400, title: 'Фазовый портрет.'} }\n      />\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}